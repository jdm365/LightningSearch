#ifndef PARQUET_BINDINGS_H
#define PARQUET_BINDINGS_H

/* This file is automatically generated by cbindgen. Do not edit manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct Field Field;

typedef struct ParquetReaderHandle ParquetReaderHandle;

void convert_parquet_to_csv(const uint8_t *_parquet_path);

/**
 * Create a new Parquet reader and return a handle to it.
 *
 * # Safety
 * The `filename` must be a valid, null-terminated C string.
 */
struct ParquetReaderHandle *create_parquet_reader(const uint8_t *filename);

void free_parquet_reader(struct ParquetReaderHandle *handle);

uint8_t *read_parquet_row_group_column_utf8_null_terminated_c(const uint8_t *filename,
                                                              uintptr_t row_group_index,
                                                              uintptr_t column_index,
                                                              uintptr_t *values_len);

uint8_t *read_parquet_row_group_column_utf8_vbyte_c(const uint8_t *filename,
                                                    uintptr_t row_group_index,
                                                    uintptr_t column_index,
                                                    uintptr_t *values_len);

void free_vec(uint8_t *ptr, uintptr_t size);

uintptr_t get_num_row_groups_c(const uint8_t *filename);

uintptr_t get_num_rows_c(const uint8_t *filename);

uintptr_t get_num_rows_in_row_group_c(const uint8_t *filename, uintptr_t row_group_index);

void get_col_names_c(const uint8_t *filename, uint8_t *col_names);

void fetch_row_from_row_group_c(struct ParquetReaderHandle *pr,
                                uintptr_t row_group_index,
                                uintptr_t row_index,
                                uint8_t *values,
                                struct Field *result_positions_ptr);

#endif  /* PARQUET_BINDINGS_H */
